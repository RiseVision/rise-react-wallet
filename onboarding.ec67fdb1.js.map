{"version":3,"sources":["components/ModalBackdrop.tsx","components/ModalPaper.tsx","containers/onboarding/AccountCreatedPage.tsx","../node_modules/@material-ui/icons/ChevronRight.js","../node_modules/mdi-material-ui/ServerNetwork.js","../node_modules/mdi-material-ui/SwapVertical.js","components/FlagIcon.tsx","containers/onboarding/AddAccountPage.tsx","../node_modules/@material-ui/icons/Translate.js","containers/onboarding/ChooseLanguagePage.tsx","../node_modules/@material-ui/core/es/internal/svg-icons/RadioButtonUnchecked.js","../node_modules/@material-ui/core/es/internal/svg-icons/RadioButtonChecked.js","../node_modules/@material-ui/core/es/Radio/Radio.js","../node_modules/@material-ui/core/es/Radio/index.js","containers/onboarding/ChooseNetworkPage.tsx","containers/onboarding/ExistingAccountPage.tsx","containers/onboarding/ExistingAccountTypePage.tsx","../src/FileSaver.js","containers/onboarding/ImportExportPage.tsx","containers/onboarding/InstallToHomeScreen.tsx","containers/onboarding/LedgerAccountPage.tsx","containers/onboarding/MnemonicAccountPage.tsx","containers/onboarding/NewMnemonicPage.tsx","containers/onboarding/NoMnemonicNoticePage.tsx","containers/onboarding/Onboarding.tsx","containers/onboarding/SecurityNoticePage.tsx","containers/onboarding/VerifyMnemonicPage.tsx","containers/onboarding/index.ts"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_react","_createSvgIcon","_default","createElement","Fragment","d","fill","RadioButtonUnchecked","_ref","React","props","SvgIcon","muiName","RadioButtonChecked","styles","theme","root","color","palette","text","secondary","checked","disabled","colorPrimary","primary","main","action","colorSecondary","RadioButtonUncheckedIcon","_ref2","RadioButtonCheckedIcon","Radio","classes","other","SwitchBase","type","icon","checkedIcon","defaultProps","name"],"mappings":"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","file":"onboarding.ec67fdb1.js","sourceRoot":"../../src","sourcesContent":["import { BackdropProps } from '@material-ui/core/es/Backdrop';\nimport Fade from '@material-ui/core/es/Fade';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport classNames from 'classnames';\nimport React from 'react';\n\nconst styles = createStyles({\n  root: {\n    position: 'fixed',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: '100vh',\n\n    backgroundColor: '#3fbb90',\n    backgroundImage: `linear-gradient(45deg, #3fbb90 0%, #ade690 100%)`,\n    backgroundAttachment: 'fixed',\n\n    // Remove grey highlight\n    WebkitTapHighlightColor: 'transparent'\n  },\n  invisible: {\n    backgroundColor: 'transparent',\n    backgroundImage: 'none'\n  }\n});\n\ntype BaseProps = BackdropProps & WithStyles<typeof styles>;\n\ninterface Props extends BaseProps {}\n\nconst stylesDecorator = withStyles(styles, { name: 'ModalBackdrop' });\n\nconst ModalBackdrop = stylesDecorator(\n  class extends React.Component<Props> {\n    render() {\n      const {\n        classes,\n        className,\n        invisible,\n        open,\n        transitionDuration,\n        ...other\n      } = this.props;\n      return (\n        <Fade appear={true} in={open} timeout={transitionDuration} {...other}>\n          <div\n            className={classNames(\n              classes.root,\n              {\n                [classes.invisible]: invisible\n              },\n              className\n            )}\n            aria-hidden=\"true\"\n          />\n        </Fade>\n      );\n    }\n  }\n);\n\nexport default ModalBackdrop;\n","import { BackdropProps } from '@material-ui/core/es/Backdrop';\nimport Fade from '@material-ui/core/es/Fade';\nimport Modal from '@material-ui/core/es/Modal';\nimport Paper from '@material-ui/core/es/Paper';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport { duration } from '@material-ui/core/es/styles/transitions';\nimport React from 'react';\nimport ModalBackdrop from './ModalBackdrop';\n\nconst styles = createStyles({\n  modal: {\n    overflow: 'auto'\n  },\n  content: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: '100%',\n    minHeight: '100%',\n\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n\n    outline: 'none'\n  },\n  paper: {\n    marginTop: 20,\n    marginBottom: 20,\n    marginLeft: 10,\n    marginRight: 10,\n    maxWidth: 500\n  }\n});\n\ntype BaseProps = React.HTMLAttributes<HTMLDivElement> &\n  WithStyles<typeof styles>;\n\ninterface Props extends BaseProps {\n  open: boolean;\n  backdrop?: React.ReactType<BackdropProps>;\n  onEscapeKeyDown?: React.ReactEventHandler<{}>;\n}\n\nconst stylesDecorator = withStyles(styles, { name: 'ModalPaper' });\n\nconst ModalPaper = stylesDecorator(\n  class extends React.Component<Props> {\n    render() {\n      const {\n        classes,\n        open,\n        backdrop,\n        onEscapeKeyDown,\n        children,\n        role,\n        ...other\n      } = this.props;\n      const transitionDuration = {\n        enter: duration.enteringScreen,\n        exit: duration.leavingScreen\n      };\n      return (\n        <Modal\n          open={open}\n          className={classes.modal}\n          BackdropProps={{\n            transitionDuration\n          }}\n          BackdropComponent={this.props.backdrop || ModalBackdrop}\n          onEscapeKeyDown={onEscapeKeyDown}\n        >\n          <Fade\n            appear={true}\n            in={open}\n            timeout={transitionDuration}\n            {...{\n              // Fade component passes all extra props to its children,\n              // but TS typedef don't reflect that. Modal component does\n              // various detections based on it's child props, so this is\n              // a hacky way around the TS compiler to make everything work.\n              role: role || 'dialog'\n            }}\n          >\n            <div className={classes.content} aria-modal={true} {...other}>\n              <Paper className={classes.paper}>{children}</Paper>\n            </div>\n          </Fade>\n        </Modal>\n      );\n    }\n  }\n);\n\nexport default ModalPaper;\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AccountIcon from '../../components/AccountIcon';\nimport Link from '../../components/Link';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { accountOverviewRoute, onboardingAddAccountRoute } from '../../routes';\nimport OnboardingStore from '../../stores/onboarding';\n\nconst styles = createStyles({\n  content: {\n    padding: 20\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n}\n\ninterface State {\n  accountAddress: string;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingAccountCreatedPage'\n});\n\n@inject('routerStore')\n@inject('onboardingStore')\n@observer\nclass AccountCreatedPage extends React.Component<Props, State> {\n  state = {\n    accountAddress: ''\n  };\n\n  get injected(): PropsInjected {\n    return this.props as PropsInjected;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    const { routerStore, onboardingStore } = this.injected;\n    const accountAddress = onboardingStore.address;\n    if (!accountAddress) {\n      routerStore.goTo(onboardingAddAccountRoute);\n    } else {\n      this.state = {\n        accountAddress\n      };\n    }\n  }\n\n  render() {\n    const { classes } = this.injected;\n    const { accountAddress } = this.state;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader>\n          <FormattedMessage\n            id=\"onboarding-account-created.title\"\n            description=\"Account created screen title\"\n            defaultMessage=\"Your new account\"\n          />\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          justify=\"center\"\n          spacing={16}\n        >\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-account-created.account-with-address-created\"\n                description=\"Text introducing the new account address\"\n                defaultMessage=\"A new account has been generated, with the following address:\"\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Grid\n              container={true}\n              justify=\"center\"\n              alignItems=\"center\"\n              spacing={8}\n            >\n              <Grid item={true}>\n                <Typography>{accountAddress}</Typography>\n              </Grid>\n              <Grid item={true}>\n                <AccountIcon size={64} address={accountAddress} />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-account-created.explain-image\"\n                description=\"Explain account image\"\n                defaultMessage={\n                  `Every account gets an automatically generated image associated with it. This can ` +\n                  `be used to double-check that the address was entered correctly when sending RISE.`\n                }\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Link\n              route={accountOverviewRoute}\n              params={{\n                id: accountAddress\n              }}\n            >\n              <Button fullWidth={true}>\n                <FormattedMessage\n                  id=\"onboarding-account-created.continue\"\n                  description=\"Continue button label\"\n                  defaultMessage=\"Go to account overview\"\n                />\n              </Button>\n            </Link>\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(AccountCreatedPage);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"path\", {\n  d: \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"\n}), _react.default.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n})), 'ChevronRight');\n\nexports.default = _default;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createIcon = require('./util/createIcon');\n\nvar _createIcon2 = _interopRequireDefault(_createIcon);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _createIcon2.default)('M13,19H14C14.55,19 15,19.45 15,20H22V22H15C15,22.55 14.55,23 14,23H10C9.45,23 9,22.55 9,22H2V20H9C9,19.45 9.45,19 10,19H11V17H4C3.45,17 3,16.55 3,16V12C3,11.45 3.45,11 4,11H20C20.55,11 21,11.45 21,12V16C21,16.55 20.55,17 20,17H13V19M4,3H20C20.55,3 21,3.45 21,4V8C21,8.55 20.55,9 20,9H4C3.45,9 3,8.55 3,8V4C3,3.45 3.45,3 4,3M9,7H10V5H9V7M9,15H10V13H9V15M5,5V7H7V5H5M5,13V15H7V13H5Z');","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createIcon = require('./util/createIcon');\n\nvar _createIcon2 = _interopRequireDefault(_createIcon);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _createIcon2.default)('M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z');","import {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { CountryCode } from '../utils/i18n';\n\nconst styles = createStyles({\n  root: {\n    width: 30,\n    height: 18,\n    borderRadius: 3,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center'\n  }\n});\n\nconst countryFlags: { [P in CountryCode]: string } = {\n  // de: require('svg-country-flags/svg/de.svg'),\n  gb: require('svg-country-flags/svg/gb.svg'),\n  // es: require('svg-country-flags/svg/es.svg'),\n  ee: require('svg-country-flags/svg/ee.svg'),\n  fr: require('svg-country-flags/svg/fr.svg'),\n  // it: require('svg-country-flags/svg/it.svg'),\n  // hu: require('svg-country-flags/svg/hu.svg'),\n  nl: require('svg-country-flags/svg/nl.svg'),\n  pl: require('svg-country-flags/svg/pl.svg')\n  // ro: require('svg-country-flags/svg/ro.svg'),\n  // ru: require('svg-country-flags/svg/ru.svg'),\n  // ua: require('svg-country-flags/svg/ua.svg'),\n  // cn: require('svg-country-flags/svg/cn.svg'),\n};\n\ninterface Props extends WithStyles<typeof styles> {\n  className?: string;\n  countryCode: CountryCode;\n}\n\nconst stylesDecorator = withStyles(styles, { name: 'AccountIcon' });\n\nconst FlagIcon = stylesDecorator(\n  class extends React.Component<Props> {\n    render() {\n      const { classes, className: classNameProp, countryCode } = this.props;\n      return (\n        <div\n          className={classNames(classes.root, classNameProp)}\n          style={{ backgroundImage: `url(${countryFlags[countryCode]})` }}\n        />\n      );\n    }\n  }\n);\n\nexport default FlagIcon;\n","import List from '@material-ui/core/es/List';\nimport ListItem from '@material-ui/core/es/ListItem';\nimport ListItemText from '@material-ui/core/es/ListItemText';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport ServerNetworkIcon from 'mdi-material-ui/ServerNetwork';\nimport ImportExportIcon from 'mdi-material-ui/SwapVertical';\nimport { inject, observer } from 'mobx-react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport FlagIcon from '../../components/FlagIcon';\nimport Link from '../../components/Link';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  onboardingChooseLanguageRoute,\n  onboardingExistingAccountRoute,\n  onboardingLedgerAccount,\n  onboardingSecurityNoticeRoute,\n  accountOverviewNoIDRoute,\n  onboardingChooseNetworkRoute,\n  onboardingInstallToHomeScreenRoute,\n  onboardingImportExportRoute\n} from '../../routes';\nimport LangStore from '../../stores/lang';\nimport LedgerStore from '../../stores/ledger';\nimport OnboardingStore from '../../stores/onboarding';\nimport WalletStore from '../../stores/wallet';\nimport { getMainCountryForLocale } from '../../utils/i18n';\n\nconst riseIcon = require('../../images/rise_icon.svg');\n\nconst styles = createStyles({\n  titleIcon: {\n    margin: '-4px 4px'\n  },\n  icon: {\n    margin: '0 3px',\n    color: '#999'\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  langStore: LangStore;\n  onboardingStore: OnboardingStore;\n  walletStore: WalletStore;\n  ledgerStore: LedgerStore;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingAddAccountPage'\n});\n\n@inject('langStore')\n@inject('onboardingStore')\n@inject('walletStore')\n@inject('ledgerStore')\n@observer\nclass AddAccountPage extends React.Component<Props> {\n  get injected(): PropsInjected {\n    return this.props as PropsInjected;\n  }\n\n  handleBeforeNavigate = () => {\n    const { onboardingStore } = this.injected;\n    onboardingStore.reset();\n  }\n\n  handleAddLedgerClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    this.injected.ledgerStore.open();\n  }\n\n  render() {\n    const { classes, langStore, walletStore } = this.injected;\n    const showClose = [...walletStore.accounts.keys()].length > 0;\n    let network;\n\n    switch (walletStore.getNetwork()) {\n      case 'mainnet':\n        network = (\n          <FormattedMessage\n            id=\"onboarding-add-account.official-main-network\"\n            description=\"Label for a main network\"\n            defaultMessage=\"official mainnet\"\n          />\n        );\n        break;\n      case 'testnet':\n        network = (\n          <FormattedMessage\n            id=\"onboarding-add-account.official-test-network\"\n            description=\"Label for a test network\"\n            defaultMessage=\"official testnet\"\n          />\n        );\n        break;\n      case 'devnet':\n        network = (\n          <FormattedMessage\n            id=\"onboarding-add-account.official-dev-network\"\n            description=\"Label for a dev network\"\n            defaultMessage=\"official devnet\"\n          />\n        );\n        break;\n      case 'custom':\n        network = (\n          <FormattedMessage\n            id=\"onboarding-add-account.custom-network\"\n            description=\"Label for a custom network\"\n            defaultMessage=\"custom\"\n          />\n        );\n        break;\n    }\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader\n          closeLink={\n            showClose\n              ? {\n                  route: accountOverviewNoIDRoute,\n                  onBeforeNavigate: this.handleBeforeNavigate\n                }\n              : undefined\n          }\n        >\n          <FormattedMessage\n            id=\"onboarding-add-account.title\"\n            description=\"Add account screen title\"\n            defaultMessage=\"{icon} RISE wallet\"\n            values={{\n              icon: (\n                <img\n                  className={classes.titleIcon}\n                  src={riseIcon}\n                  height={24}\n                  alt=\"\"\n                />\n              )\n            }}\n          />\n        </ModalPaperHeader>\n        <List>\n          <Link\n            route={onboardingSecurityNoticeRoute}\n            onBeforeNavigate={this.handleBeforeNavigate}\n          >\n            <ListItem button={true}>\n              <ListItemText\n                primary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.new-account\"\n                    description=\"New account button title\"\n                    defaultMessage=\"New account\"\n                  />\n                }\n                secondary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.new-account-tip\"\n                    description=\"New account button tip\"\n                    defaultMessage=\"I want to create a new account on the RISE network\"\n                  />\n                }\n              />\n              <ChevronRight />\n            </ListItem>\n          </Link>\n          <Link\n            route={onboardingExistingAccountRoute}\n            onBeforeNavigate={this.handleBeforeNavigate}\n          >\n            <ListItem button={true}>\n              <ListItemText\n                primary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.existing-account\"\n                    description=\"Existing account button title\"\n                    defaultMessage=\"Existing account\"\n                  />\n                }\n                secondary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.existing-account-tip\"\n                    description=\"Existing account button tip\"\n                    defaultMessage=\"I want to access an existing account on the RISE network\"\n                  />\n                }\n              />\n              <ChevronRight />\n            </ListItem>\n          </Link>\n          <Link\n            route={onboardingLedgerAccount}\n            onBeforeNavigate={this.handleBeforeNavigate}\n            onClick={this.handleAddLedgerClick}\n          >\n            <ListItem button={true}>\n              <ListItemText\n                primary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.hw-wallet-account\"\n                    description=\"Hardware wallet account button title\"\n                    defaultMessage=\"Hardware wallet account\"\n                  />\n                }\n                secondary={\n                  <FormattedMessage\n                    id=\"onboarding-add-account.hw-wallet-account-tip\"\n                    description=\"Hardware wallet account button tip\"\n                    defaultMessage=\"I want to import an account from my Ledger device\"\n                  />\n                }\n              />\n              <ChevronRight />\n            </ListItem>\n          </Link>\n          <Link\n            route={onboardingChooseLanguageRoute}\n            onBeforeNavigate={this.handleBeforeNavigate}\n          >\n            <ListItem button={true}>\n              <FlagIcon\n                countryCode={getMainCountryForLocale(langStore.locale)}\n              />\n              <ListItemText>\n                <FormattedMessage\n                  id=\"onboarding-add-account.change-language\"\n                  description=\"Change language button label\"\n                  defaultMessage=\"Change language\"\n                />\n              </ListItemText>\n              <ChevronRight />\n            </ListItem>\n          </Link>\n          {walletStore.isMobile &&\n            !walletStore.isHomeScreen && (\n              <Link\n                route={onboardingInstallToHomeScreenRoute}\n                onBeforeNavigate={this.handleBeforeNavigate}\n              >\n                <ListItem button={true}>\n                  <AppsIcon className={classes.icon} />\n                  <ListItemText>\n                    <FormattedMessage\n                      id=\"onboarding-add-account.install-to-homescreen\"\n                      description=\"Install to homescreen button label\"\n                      defaultMessage=\"Install to Home Screen\"\n                    />\n                  </ListItemText>\n                  <ChevronRight />\n                </ListItem>\n              </Link>\n            )}\n          {!walletStore.isMobile &&\n            walletStore.supportsA2HS &&\n            !walletStore.isHomeScreen && (\n              <Link\n                route={onboardingInstallToHomeScreenRoute}\n                onBeforeNavigate={this.handleBeforeNavigate}\n              >\n                <ListItem button={true}>\n                  <AppsIcon className={classes.icon} />\n                  <ListItemText>\n                    <FormattedMessage\n                      id=\"onboarding-add-account.install-to-desktop\"\n                      description=\"Install to desktop button label\"\n                      defaultMessage=\"Install to Desktop\"\n                    />\n                  </ListItemText>\n                  <ChevronRight />\n                </ListItem>\n              </Link>\n            )}\n          <Link\n            route={onboardingImportExportRoute}\n            onBeforeNavigate={this.handleBeforeNavigate}\n          >\n            <ListItem button={true}>\n              <ImportExportIcon className={classes.icon} />\n              <ListItemText>\n                <FormattedMessage\n                  id=\"onboarding-add-account.import-export\"\n                  description=\"Import / Export button label\"\n                  defaultMessage=\"Import / Export accounts\"\n                />\n              </ListItemText>\n              <ChevronRight />\n            </ListItem>\n          </Link>\n          <Link\n            route={onboardingChooseNetworkRoute}\n            onBeforeNavigate={this.handleBeforeNavigate}\n          >\n            <ListItem button={true}>\n              <ServerNetworkIcon className={classes.icon} />\n              <ListItemText>\n                <FormattedMessage\n                  id=\"onboarding-add-account.select-node\"\n                  description=\"Change node button label\"\n                  defaultMessage=\"Change node ({name})\"\n                  values={{ name: network }}\n                />\n              </ListItemText>\n              <ChevronRight />\n            </ListItem>\n          </Link>\n        </List>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(AddAccountPage);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(_react.default.Fragment, null, _react.default.createElement(\"path\", {\n  fill: \"none\",\n  d: \"M0 0h24v24H0z\"\n}), _react.default.createElement(\"path\", {\n  d: \"M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z\"\n})), 'Translate');\n\nexports.default = _default;","import List from '@material-ui/core/es/List';\nimport ListItem from '@material-ui/core/es/ListItem';\nimport ListItemText from '@material-ui/core/es/ListItemText';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport FlagIcon from '../../components/FlagIcon';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute } from '../../routes';\nimport LangStore from '../../stores/lang';\nimport {\n  getMainCountryForLocale,\n  getUserLocales,\n  Locale,\n  Locales\n} from '../../utils/i18n';\n\nconst riseIcon = require('../../images/rise_icon.svg');\n\n// Labels are hard-coded here as we want to load the actual localization data\n// after the user has selected the language, not before.\nconst localeLabels: { [P in Locale]: string } = {\n  // de: 'Weiter auf Deutsch',\n  en: 'Continue in English',\n  // es: 'Continuar en español',\n  et: 'Jätka eesti keeles',\n  fr: 'Continuer en français',\n  // it: 'Continua in italiano',\n  // hu: 'Folytatás magyarul',\n  nl: 'Ga door in het Nederlands',\n  pl: 'Kontynuuj po polsku'\n  // ro: 'Continuați în română',\n  // ru: 'Продолжить на русском',\n  // uk: 'Продовжуйте по-українськи',\n  // zh: '繼續用中文',\n};\n\nconst styles = createStyles({\n  languageList: {\n    maxWidth: 320\n  },\n  titleIcon: {\n    margin: '-4px 4px'\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  langStore: LangStore;\n  routerStore: RouterStore;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingChooseLanguagePage'\n});\n\n@inject('langStore')\n@inject('routerStore')\n@observer\nclass ChooseLanguagePage extends React.Component<Props> {\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  handleLanguageClicked = async (locale: Locale) => {\n    const { routerStore, langStore } = this.injected;\n    await langStore.changeLanguage(locale);\n    routerStore.goTo(onboardingAddAccountRoute);\n  }\n\n  render() {\n    // Order languages by browser preference\n    const userLanguages = getUserLocales();\n    let languages = Locales.map(locale => {\n      return {\n        locale: locale,\n        countryCode: getMainCountryForLocale(locale),\n        label: localeLabels[locale]\n      };\n    });\n    languages.sort((a, b) => {\n      let aIdx = userLanguages.indexOf(a.locale);\n      let bIdx = userLanguages.indexOf(b.locale);\n\n      if (aIdx < 0) {\n        aIdx = userLanguages.length;\n      }\n      if (bIdx < 0) {\n        bIdx = userLanguages.length;\n      }\n      return aIdx - bIdx;\n    });\n\n    const { classes } = this.injected;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader>\n          <FormattedMessage\n            id=\"onboarding-choose-language.title\"\n            description=\"Choose language screen title\"\n            defaultMessage=\"{icon} RISE wallet\"\n            values={{\n              icon: (\n                <img\n                  className={classes.titleIcon}\n                  src={riseIcon}\n                  height={24}\n                  alt=\"\"\n                />\n              )\n            }}\n          />\n        </ModalPaperHeader>\n        <List className={classes.languageList}>\n          {languages.map((lang, idx) => (\n            <ListItem\n              key={lang.locale}\n              button={true}\n              divider={idx + 1 === languages.length}\n              onClick={this.handleLanguageClicked.bind(this, lang.locale)}\n            >\n              <FlagIcon countryCode={lang.countryCode} />\n              <ListItemText>{lang.label}</ListItemText>\n              <ChevronRightIcon />\n            </ListItem>\n          ))}\n          <ListItem\n            key=\"help-us\"\n            component=\"a\"\n            button={true}\n            href=\"https://crowdin.com/project/rise-web-wallet\"\n            target=\"_blank\"\n          >\n            <TranslateIcon />\n            <ListItemText\n              primary={\n                <FormattedMessage\n                  id=\"onboarding-choose-language.translate-cta-title\"\n                  description=\"Translate wallet call to action title\"\n                  defaultMessage=\"Missing your language?\"\n                />\n              }\n              secondary={\n                <FormattedMessage\n                  id=\"onboarding-choose-language.translate-cta\"\n                  description=\"Translate wallet call to action\"\n                  defaultMessage=\"Help us translate RISE wallet!\"\n                />\n              }\n            />\n            <ChevronRightIcon />\n          </ListItem>\n        </List>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(ChooseLanguagePage);\n","import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n});\n\nlet RadioButtonUnchecked = props => React.createElement(SvgIcon, props, _ref);\n\nRadioButtonUnchecked = pure(RadioButtonUnchecked);\nRadioButtonUnchecked.muiName = 'SvgIcon';\nexport default RadioButtonUnchecked;","import React from 'react';\nimport pure from 'recompose/pure';\nimport SvgIcon from '../../SvgIcon';\n/**\n * @ignore - internal component.\n */\n\nvar _ref = React.createElement(\"path\", {\n  d: \"M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n});\n\nlet RadioButtonChecked = props => React.createElement(SvgIcon, props, _ref);\n\nRadioButtonChecked = pure(RadioButtonChecked);\nRadioButtonChecked.muiName = 'SvgIcon';\nexport default RadioButtonChecked;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport SwitchBase from '../internal/SwitchBase';\nimport RadioButtonUncheckedIcon from '../internal/svg-icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '../internal/svg-icons/RadioButtonChecked';\nimport { capitalize } from '../utils/helpers';\nimport withStyles from '../styles/withStyles';\nexport const styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    color: theme.palette.text.secondary\n  },\n\n  /* Styles applied to the root element if `checked={true}`. */\n  checked: {},\n\n  /* Styles applied to the root element if `disabled={true}`. */\n  disabled: {},\n\n  /* Styles applied to the root element if `color=\"primary\"`. */\n  colorPrimary: {\n    '&$checked': {\n      color: theme.palette.primary.main\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled\n    }\n  },\n\n  /* Styles applied to the root element if `color=\"secondary\"`. */\n  colorSecondary: {\n    '&$checked': {\n      color: theme.palette.secondary.main\n    },\n    '&$disabled': {\n      color: theme.palette.action.disabled\n    }\n  }\n});\n\nvar _ref = React.createElement(RadioButtonUncheckedIcon, null);\n\nvar _ref2 = React.createElement(RadioButtonCheckedIcon, null);\n\nfunction Radio(props) {\n  const {\n    classes,\n    color\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"color\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"radio\",\n    icon: _ref,\n    checkedIcon: _ref2,\n    classes: {\n      root: classNames(classes.root, classes[`color${capitalize(color)}`]),\n      checked: classes.checked,\n      disabled: classes.disabled\n    }\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * Attributes applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Use that property to pass a ref callback to the native input component.\n   */\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value`.\n   * @param {boolean} checked The `checked` value of the switch\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The input component property `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component.\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool])\n} : void 0;\nRadio.defaultProps = {\n  color: 'secondary'\n};\nexport default withStyles(styles, {\n  name: 'MuiRadio'\n})(Radio);","export { default } from './Radio';","import Button from '@material-ui/core/es/Button';\nimport List from '@material-ui/core/es/List';\nimport ListItem from '@material-ui/core/es/ListItem';\nimport ListItemText from '@material-ui/core/es/ListItemText';\nimport Radio from '@material-ui/core/es/Radio';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React, { FormEvent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute } from '../../routes';\nimport WalletStore, { NetworkType } from '../../stores/wallet';\nimport lstore from '../../utils/store';\nimport { isMainnet } from '../../utils/utils';\n\nconst styles = createStyles({\n  languageList: {\n    maxWidth: 320\n  },\n  titleIcon: {\n    margin: '-4px 4px'\n  },\n  radio: {\n    paddingTop: 0,\n    paddingBottom: 0\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  walletStore: WalletStore;\n  routerStore: RouterStore;\n}\n\ninterface State {\n  network: NetworkType;\n  url?: string;\n  urlError?: boolean;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingChooseLanguagePage'\n});\n\n@inject('walletStore')\n@inject('routerStore')\n@observer\nclass ChooseNetworkPage extends React.Component<Props, State> {\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    const { walletStore } = this.injected;\n    const { type = null, url = null } = lstore.get('network') || {};\n    // set from settings\n    if (type) {\n      this.state = {\n        network: type,\n        url\n      };\n    } else {\n      // auto detect\n      this.state = {\n        network: isMainnet(walletStore.config.domain) ? 'mainnet' : 'testnet'\n      };\n    }\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ network: event.target.value as NetworkType });\n  };\n\n  handleSetNetwork = (network: NetworkType) => () => {\n    this.setState({ network });\n  };\n\n  handleCustomURL = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      url: event.target.value,\n      urlError: false\n    });\n  };\n\n  handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const { routerStore, walletStore } = this.injected;\n    const { url = '', network } = this.state;\n    let error = false;\n    if (network === 'custom') {\n      try {\n        if (!url) {\n          throw new Error('No URL');\n        }\n        const nethash = await walletStore.checkNodesNethash(url);\n        if (!nethash) {\n          throw new Error('Nethash check failed');\n        }\n      } catch {\n        error = true;\n      }\n    }\n    if (error) {\n      this.setState({\n        urlError: true\n      });\n    } else {\n      walletStore.setNetwork(network, url);\n      routerStore.goTo(onboardingAddAccountRoute);\n    }\n  };\n\n  render() {\n    const { classes } = this.injected;\n    const { network } = this.state;\n    // const { network, url, urlError } = this.state;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-choose-network.title\"\n            description=\"Choose network screen title\"\n            defaultMessage=\"Change node\"\n          />\n        </ModalPaperHeader>\n        <form onSubmit={this.handleSubmit}>\n          <List>\n            <ListItem button={true} onClick={this.handleSetNetwork('mainnet')}>\n              <ListItemText>\n                <Radio\n                  className={classes.radio}\n                  name=\"network\"\n                  value=\"mainnet\"\n                  onChange={this.handleChange}\n                  checked={network === 'mainnet'}\n                />\n                <FormattedMessage\n                  id=\"onboarding-choose-network.official-main-network\"\n                  description=\"Label for official main network\"\n                  defaultMessage=\"Official mainnet\"\n                />\n              </ListItemText>\n            </ListItem>\n            <ListItem button={true} onClick={this.handleSetNetwork('testnet')}>\n              <ListItemText>\n                <Radio\n                  className={classes.radio}\n                  name=\"network\"\n                  value=\"testnet\"\n                  onChange={this.handleChange}\n                  checked={network === 'testnet'}\n                />\n                <FormattedMessage\n                  id=\"onboarding-choose-network.official-test-network\"\n                  description=\"Label for official test network\"\n                  defaultMessage=\"Official testnet\"\n                />\n              </ListItemText>\n            </ListItem>\n            <ListItem button={true} onClick={this.handleSetNetwork('devnet')}>\n              <ListItemText>\n                <Radio\n                  className={classes.radio}\n                  name=\"network\"\n                  value=\"devnet\"\n                  onChange={this.handleChange}\n                  checked={network === 'devnet'}\n                />\n                <FormattedMessage\n                  id=\"onboarding-choose-network.official-dev-network\"\n                  description=\"Label for official dev network\"\n                  defaultMessage=\"Official devnet\"\n                />\n              </ListItemText>\n            </ListItem>\n            {/*<ListItem button={true}>\n              <ListItemText onClick={this.handleSetNetwork('custom')}>\n                <Radio\n                  name=\"network\"\n                  value=\"custom\"\n                  onChange={this.handleChange}\n                  checked={network === 'custom'}\n                />\n                <TextField\n                  onFocus={this.handleSetNetwork('custom')}\n                  label={\n                    this.state.urlError ? (\n                      <FormattedMessage\n                        id=\"choose-network.invalid-custom-url\"\n                        description=\"Custom URL text field error\"\n                        defaultMessage=\"Invalid node URL\"\n                      />\n                    ) : (\n                      <FormattedMessage\n                        id=\"choose-network.custom-url\"\n                        description=\"Custom URL text field label\"\n                        defaultMessage=\"Custom node URL\"\n                      />\n                    )\n                  }\n                  onChange={this.handleCustomURL}\n                  error={urlError}\n                  value={url}\n                />\n              </ListItemText>\n            </ListItem>*/}\n            <ListItem>\n              <Button type=\"submit\" fullWidth={true}>\n                <FormattedMessage\n                  id=\"choose-network.submit-button\"\n                  description=\"Select node submit button\"\n                  defaultMessage=\"Select node\"\n                />\n              </Button>\n            </ListItem>\n          </List>\n        </form>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(ChooseNetworkPage);\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport TextField from '@material-ui/core/es/TextField';\nimport Typography from '@material-ui/core/es/Typography';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport {\n  defineMessages,\n  FormattedMessage,\n  InjectedIntlProps,\n  injectIntl\n} from 'react-intl';\nimport AccountIcon from '../../components/AccountIcon';\nimport Link from '../../components/Link';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  onboardingAddAccountRoute,\n  onboardingExistingAccountTypeRoute,\n  onboardingMnemonicAccountRoute\n} from '../../routes';\nimport OnboardingStore from '../../stores/onboarding';\nimport { normalizeAddress } from '../../utils/utils';\n\nconst styles = createStyles({\n  content: {\n    padding: 20\n  },\n  accountContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  accountField: {\n    flex: 1\n  },\n  accountIcon: {\n    marginLeft: 10\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n}\n\ninterface State {\n  address: string;\n  addressInvalid: boolean;\n  normalizedAddress: string;\n}\n\ntype DecoratedProps = Props & InjectedIntlProps;\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingExistingAccountPage'\n});\n\nconst messages = defineMessages({\n  invalidAddressGeneric: {\n    id: 'onboarding-existing-account.invalid-address-generic',\n    description: 'Error label for invalid address text input',\n    defaultMessage:\n      'Invalid RISE address.'\n  },\n  invalidAddressMnemonic: {\n    id: 'onboarding-existing-account.invalid-address-mnemonic',\n    description:\n      'Error label for invalid address text input when it looks like a mnemonic',\n    defaultMessage:\n      'Looks like you\\'re trying to enter your passphrase. Please enter your account address instead.'\n  }\n});\n\n@inject('onboardingStore')\n@inject('routerStore')\n@observer\nclass ExistingAccountPage extends React.Component<DecoratedProps, State> {\n  get injected(): PropsInjected & DecoratedProps {\n    // @ts-ignore\n    return this.props;\n  }\n\n  constructor(props: DecoratedProps) {\n    super(props);\n\n    const { onboardingStore } = this.injected;\n    const address = onboardingStore.address || '';\n    this.state = {\n      address,\n      addressInvalid: false,\n      normalizedAddress: normalizeAddress(address.trim())\n    };\n  }\n\n  handleFormSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n\n    const { routerStore, onboardingStore } = this.injected;\n    const { normalizedAddress } = this.state;\n    const addressInvalid = !normalizedAddress;\n    if (addressInvalid) {\n      this.setState({ addressInvalid: true });\n      return;\n    }\n\n    onboardingStore.address = normalizedAddress;\n    routerStore.goTo(onboardingExistingAccountTypeRoute);\n  }\n\n  handleAddressChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const address = ev.target.value;\n    const normalizedAddress = normalizeAddress(address.trim());\n\n    this.setState({\n      address,\n      addressInvalid: false,\n      normalizedAddress\n    });\n  }\n\n  handleAddressBlur = () => {\n    const { address, normalizedAddress } = this.state;\n    const addressInvalid = !!address && !normalizedAddress;\n    this.setState({ addressInvalid });\n  }\n\n  addressError(): string | null {\n    const { intl } = this.injected;\n    const { address, normalizedAddress } = this.state;\n    if (normalizedAddress !== '') {\n      return null;\n    }\n\n    if (address.trim().indexOf(' ') >= 0) {\n      return intl.formatMessage(messages.invalidAddressMnemonic);\n    } else {\n      return intl.formatMessage(messages.invalidAddressGeneric);\n    }\n  }\n\n  render() {\n    const { classes } = this.injected;\n    const { address, addressInvalid, normalizedAddress } = this.state;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-existing-account.title\"\n            description=\"Existing account screen title\"\n            defaultMessage=\"Existing account\"\n          />\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          spacing={16}\n          component=\"form\"\n          onSubmit={this.handleFormSubmit}\n        >\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-existing-account.enter-address-text\"\n                description=\"Text asking the user to fill the input field\"\n                defaultMessage=\"Enter the address of an existing RISE account you wish to access:\"\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <div className={classes.accountContainer}>\n              <TextField\n                className={classes.accountField}\n                label={\n                  <FormattedMessage\n                    id=\"onboarding-existing-account.address-input-label\"\n                    description=\"Account address input label\"\n                    defaultMessage=\"Account address\"\n                  />\n                }\n                autoFocus={true}\n                error={addressInvalid}\n                value={address}\n                FormHelperTextProps={{\n                  error: addressInvalid\n                }}\n                helperText={addressInvalid ? this.addressError() || '' : ''}\n                onChange={this.handleAddressChange}\n                onBlur={this.handleAddressBlur}\n              />\n              <AccountIcon\n                className={classes.accountIcon}\n                size={48}\n                address={normalizedAddress}\n              />\n            </div>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Button type=\"submit\" fullWidth={true}>\n              <FormattedMessage\n                id=\"onboarding-existing-account.continue\"\n                description=\"Continue button label\"\n                defaultMessage=\"Continue\"\n              />\n            </Button>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-existing-account.recover-from-mnemonic\"\n                description=\"Instructions for people who forgot their account address\"\n                defaultMessage=\"Forgotten your address but have your secret mnemonic?\"\n              />{' '}\n              <Link route={onboardingMnemonicAccountRoute}>\n                <a>Click here</a>\n              </Link>\n            </Typography>\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(injectIntl(ExistingAccountPage));\n","import List from '@material-ui/core/es/List';\nimport ListItem from '@material-ui/core/es/ListItem';\nimport ListItemText from '@material-ui/core/es/ListItemText';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  accountOverviewRoute,\n  onboardingExistingAccountRoute,\n  onboardingNoMnemonicNoticeRoute,\n  onboardingAddAccountRoute\n} from '../../routes';\nimport { AccountType } from '../../stores/account';\nimport OnboardingStore from '../../stores/onboarding';\nimport WalletStore from '../../stores/wallet';\n\ninterface Props {}\n\ninterface PropsInjected extends Props {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n  walletStore: WalletStore;\n}\n\n@inject('onboardingStore')\n@inject('routerStore')\n@inject('walletStore')\n@observer\n// TODO handle missing onboardingStore.address using a redir\nclass ExistingAccountTypePage extends React.Component<Props> {\n  get injected(): PropsInjected {\n    return this.props as PropsInjected;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    const { routerStore, onboardingStore } = this.injected;\n    if (!onboardingStore.address) {\n      routerStore.goTo(onboardingAddAccountRoute);\n    }\n  }\n\n  handleFullAccessClick = async () => {\n    const { routerStore, onboardingStore, walletStore } = this.injected;\n    const address = onboardingStore.address!;\n\n    let hasFullAccessAccounts = false;\n    for (const account of walletStore.accounts.values()) {\n      if (account.type !== AccountType.READONLY) {\n        hasFullAccessAccounts = true;\n        break;\n      }\n    }\n\n    walletStore.login(address, { type: AccountType.MNEMONIC }, true);\n    if (hasFullAccessAccounts) {\n      routerStore.goTo(accountOverviewRoute, { id: address });\n    } else {\n      routerStore.goTo(onboardingNoMnemonicNoticeRoute);\n    }\n  };\n\n  handleReadOnlyClick = () => {\n    const { routerStore, onboardingStore, walletStore } = this.injected;\n    const address = onboardingStore.address!;\n    walletStore.login(address, { type: AccountType.READONLY }, true);\n    routerStore.goTo(accountOverviewRoute, { id: address });\n  };\n\n  render() {\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingExistingAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-existing-account-type.title\"\n            description=\"Existing account type screen title\"\n            defaultMessage=\"Account type\"\n          />\n        </ModalPaperHeader>\n        <List>\n          <ListItem button={true} onClick={this.handleFullAccessClick}>\n            <ListItemText\n              primary={\n                <FormattedMessage\n                  id=\"onboarding-existing-account-type.full-access\"\n                  description=\"Existing full access account button title\"\n                  defaultMessage=\"Full access account\"\n                />\n              }\n              secondary={\n                <FormattedMessage\n                  id=\"onboarding-existing-account-type.full-access-tip\"\n                  description=\"Existing full access account button tip\"\n                  defaultMessage={'I know the secret mnemonic for this account'}\n                />\n              }\n            />\n            <ChevronRight />\n          </ListItem>\n          <ListItem button={true} onClick={this.handleReadOnlyClick}>\n            <ListItemText\n              primary={\n                <FormattedMessage\n                  id=\"onboarding-existing-account-type.read-access\"\n                  description=\"Existing read access account button title\"\n                  defaultMessage=\"Watch only account\"\n                />\n              }\n              secondary={\n                <FormattedMessage\n                  id=\"onboarding-existing-account-type.read-access-tip\"\n                  description=\"Existing read access account button tip\"\n                  defaultMessage={\n                    \"I don't know the secret mnemonic for this account\"\n                  }\n                />\n              }\n            />\n            <ChevronRight />\n          </ListItem>\n        </List>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default ExistingAccountTypePage;\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile)\n  : 'download' in HTMLAnchorElement.prototype\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari)) && typeof FileReader === 'object') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","import { Checkbox, Theme } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { createStyles, withStyles, WithStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport * as assert from 'assert';\nimport { saveAs } from 'file-saver';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport * as moment from 'moment';\nimport * as React from 'react';\nimport { ChangeEvent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute } from '../../routes';\nimport AddressBookStore from '../../stores/addressBook';\nimport WalletStore from '../../stores/wallet';\n\nconst styles = (theme: Theme) => {\n  return createStyles({\n    content: {\n      padding: 20\n    },\n    input: {\n      paddingTop: 0,\n      paddingBottom: 0\n    },\n    divider: {\n      marginTop: '1em',\n      marginBottom: '1em'\n    },\n    checkbox: {\n      textAlign: 'left',\n      width: '100%'\n    },\n    overrideInfo: {\n      color: theme.palette.error.main,\n      fontWeight: 'bold'\n    }\n  });\n};\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  addressBookStore: AddressBookStore;\n  routerStore: RouterStore;\n  walletStore: WalletStore;\n}\n\ninterface State {\n  importOverride: boolean;\n  exportContactsChecked: boolean;\n  importSuccess: boolean;\n  importError: boolean;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingChooseLanguagePage'\n});\n\n@inject('addressBookStore')\n@inject('routerStore')\n@inject('walletStore')\n@observer\nclass ImportExportPage extends React.Component<Props, State> {\n  state = {\n    importOverride: false,\n    importSuccess: false,\n    importError: false,\n    exportContactsChecked: true\n  };\n\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    try {\n      const files = event.target.files;\n      assert(files);\n      assert(files!.length);\n      const reader = new FileReader();\n      const { walletStore } = this.injected;\n      const onload = new Promise((resolve, reject) => {\n        // @ts-ignore\n        reader.onload = (e: ProgressEvent) => resolve(e.target.result);\n        reader.onerror = reject;\n      });\n      reader.readAsText(files![0]);\n      // @ts-ignore\n      const result: string = await onload;\n      const json = JSON.parse(result);\n      const overrideExisting = false;\n      walletStore.importData(json, overrideExisting);\n      this.setState({\n        importSuccess: true,\n        importError: false\n      });\n    } catch (e) {\n      this.setState({\n        importSuccess: false,\n        importError: true\n      });\n    }\n  };\n\n  handleExport = (event: React.MouseEvent<HTMLElement>) => {\n    const { exportContactsChecked } = this.state;\n    const json = this.injected.walletStore.exportData(exportContactsChecked);\n    const blob = new Blob([JSON.stringify(json, null, 4)], {\n      type: 'application/json'\n    });\n    saveAs(blob, `rise-wallet-${moment().toISOString()}.json`);\n  };\n\n  handleImportOverrideClick = (ev: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      importOverride: !this.state.importOverride\n    });\n  };\n\n  handleExportContactsClick = (ev: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      exportContactsChecked: !this.state.exportContactsChecked\n    });\n  };\n\n  render() {\n    const { classes } = this.injected;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-import-export.title\"\n            description=\"Import / Export screen title\"\n            defaultMessage=\"Import / Export\"\n          />\n        </ModalPaperHeader>\n        <form className={classes.content}>\n          <Typography>\n            <FormattedMessage\n              id=\"onboarding-import-export.import-msg\"\n              description=\"Text describing importing\"\n              defaultMessage=\"Import accounts & contacts from a file:\"\n            />\n          </Typography>\n\n          {/* IMPORT */}\n          {this.renderImport()}\n\n          {/* EXPORT */}\n          {this.renderExport()}\n        </form>\n      </ModalPaper>\n    );\n  }\n\n  private renderImport() {\n    const { classes } = this.injected;\n\n    const { importOverride, importError, importSuccess } = this.state;\n\n    return (\n      <div>\n        <input\n          accept=\"application/json\"\n          className={classes.input}\n          onChange={this.handleImport}\n          style={{ display: 'none' }}\n          type=\"file\"\n          id=\"import-data-file\"\n        />\n\n        <FormControlLabel\n          className={classes.checkbox}\n          control={\n            <Checkbox\n              checked={importOverride}\n              onChange={this.handleImportOverrideClick}\n            />\n          }\n          label={\n            <FormattedMessage\n              id=\"onboarding-import-export.import-override\"\n              description=\"Checkbox asking about overriding existing data\"\n              defaultMessage=\"Override existing\"\n            />\n          }\n        />\n        {importOverride && (\n          <Typography className={classes.overrideInfo}>\n            <FormattedMessage\n              id=\"onboarding-import-export.import-override-confirm\"\n              description={\n                \"Notice emphasizing that there's no undo after overriding\"\n              }\n              defaultMessage=\"Overriding cannot be undone!\"\n            />\n          </Typography>\n        )}\n\n        <label htmlFor=\"import-data-file\">\n          <Button component=\"span\" fullWidth={true}>\n            <FormattedMessage\n              id=\"onboarding-import-export.select-file\"\n              description=\"Button caption for selecting a file\"\n              defaultMessage=\"Select file\"\n            />\n          </Button>\n        </label>\n\n        {importSuccess && (\n          <Typography>\n            <FormattedMessage\n              id=\"onboarding-import-export.import-success\"\n              description=\"Message when import was successful\"\n              defaultMessage=\"Import completed!\"\n            />\n          </Typography>\n        )}\n\n        {importError && (\n          <Typography>\n            <FormattedMessage\n              id=\"onboarding-import-export.import-error\"\n              description=\"Message when import was NOT successful\"\n              defaultMessage={\n                \"Something wen't wrong. Check the file and try again.\"\n              }\n            />\n          </Typography>\n        )}\n      </div>\n    );\n  }\n\n  private renderExport() {\n    const { classes, walletStore, addressBookStore } = this.injected;\n\n    const { exportContactsChecked } = this.state;\n\n    const exportPossible = Boolean(\n      walletStore.accounts.size || addressBookStore.asArray.length\n    );\n\n    if (!exportPossible) {\n      return false;\n    }\n\n    return (\n      <React.Fragment>\n        <Divider className={classes.divider} />\n        <Typography>\n          <FormattedMessage\n            id=\"onboarding-import-export.export-msg\"\n            description=\"Text describing exporting\"\n            defaultMessage=\"Export accounts & contacts to a file:\"\n          />\n        </Typography>\n        <div>\n          <FormControlLabel\n            className={classes.checkbox}\n            control={\n              <Checkbox\n                checked={exportContactsChecked}\n                onChange={this.handleExportContactsClick}\n              />\n            }\n            label={\n              <FormattedMessage\n                id=\"onboarding-import-export.export-contacts\"\n                description=\"Checkbox asking about exporting contacts\"\n                defaultMessage=\"Export contacts\"\n              />\n            }\n          />\n\n          <Button component=\"span\" fullWidth={true} onClick={this.handleExport}>\n            <FormattedMessage\n              id=\"onboarding-import-export.download-button\"\n              description=\"Download exported data button title\"\n              defaultMessage=\"Download\"\n            />\n          </Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default stylesDecorator(ImportExportPage);\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport { observer, inject } from 'mobx-react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute } from '../../routes';\nimport WalletStore from '../../stores/wallet';\n\nconst styles = createStyles({\n  content: {\n    padding: 20\n  },\n  img: {\n    textAlign: 'center'\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  walletStore: WalletStore;\n}\n\ninterface State {}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingInstallToHomeScreenPage'\n});\n\n@inject('walletStore')\n@observer\nclass InstallToHomeScreen extends React.Component<Props, State> {\n  get injected(): PropsInjected {\n    return this.props as PropsInjected;\n  }\n\n  handleInstall = () => {\n    this.injected.walletStore.installA2HS();\n  }\n\n  render() {\n    const { classes, walletStore } = this.injected;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          {walletStore.isMobile && (\n            <FormattedMessage\n              id=\"onboarding-install.title-mobile\"\n              description=\"Install to Home Screen screen title\"\n              defaultMessage=\"Install to Home Screen\"\n            />\n          )}\n          {!walletStore.isMobile && (\n            <FormattedMessage\n              id=\"onboarding-install.title-desktop\"\n              description=\"Install to Desktop screen title\"\n              defaultMessage=\"Install to Desktop\"\n            />\n          )}\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          justify=\"center\"\n          spacing={16}\n        >\n          <Grid item={true} xs={12}>\n            <Typography>\n              {walletStore.isMobile && (\n                <FormattedMessage\n                  id=\"onboarding-install.info-main-mobile\"\n                  description=\"Main info about installing app to homescreen\"\n                  defaultMessage={\n                    'You can install the wallet on your phone via ' +\n                    '\"ADD TO HOME SCREEN\".'\n                  }\n                />\n              )}\n              {!walletStore.isMobile && (\n                <FormattedMessage\n                  id=\"onboarding-install.info-main-desktop\"\n                  description=\"Main info about installing the app to desktop\"\n                  defaultMessage={\n                    'You can install the wallet on your desktop OS by ' +\n                    'pressing the button below.'\n                  }\n                />\n              )}\n            </Typography>\n            <ul>\n              <li>\n                <Typography>\n                  {walletStore.isMobile && (\n                    <FormattedMessage\n                      id=\"onboarding-install.info-icon-location-mobile\"\n                      description=\"Info about the icon location\"\n                      defaultMessage={\n                        'This will create an app icon on your phone\\'s screen'\n                      }\n                    />\n                  )}\n                  {!walletStore.isMobile && (\n                    <FormattedMessage\n                      id=\"onboarding-install.info-icon-location-desktop\"\n                      description=\"Info about the icon location\"\n                      defaultMessage={\n                        'This will create an app icon on your desktop'\n                      }\n                    />\n                  )}\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  <FormattedMessage\n                    id=\"onboarding-install.info-pwa-native-comparison\"\n                    description=\"Info comparing PWA and a native app\"\n                    defaultMessage={'The wallet will look like a regular app'}\n                  />\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  <FormattedMessage\n                    id=\"onboarding-install.info-no-appstore\"\n                    description=\"Info about appstores\"\n                    defaultMessage={\n                      'No need to access AppStore / Play Store to do this'\n                    }\n                  />\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  <FormattedMessage\n                    id=\"onboarding-install.info-offline\"\n                    description=\"Info about offline support\"\n                    defaultMessage={\n                      'Your data will be accessible even while offline'\n                    }\n                  />\n                </Typography>\n              </li>\n              <li>\n                <Typography>\n                  <FormattedMessage\n                    id=\"onboarding-install.info-autoupdate\"\n                    description=\"Info about automatic updates\"\n                    defaultMessage={\n                      'You will still receive (optional) automatic updates'\n                    }\n                  />\n                </Typography>\n              </li>\n              {!walletStore.supportsA2HS && (\n                <li>\n                  <Typography>\n                    <FormattedMessage\n                      id=\"onboarding-install.info-separate-account\"\n                      description=\"Info about separate account\"\n                      defaultMessage={\n                        'On iOS, accounts on the installed wallet will be ' +\n                        'separate from the ones on the web'\n                      }\n                    />\n                  </Typography>\n                </li>\n              )}\n            </ul>\n            {walletStore.supportsA2HS && (\n              <Button\n                type=\"submit\"\n                fullWidth={true}\n                onClick={this.handleInstall}\n              >\n                <FormattedMessage\n                  id=\"onboarding-install.install-button\"\n                  description=\"Install button label\"\n                  defaultMessage=\"Install\"\n                />\n              </Button>\n            )}\n            {walletStore.isMobile &&\n              !walletStore.supportsA2HS && (\n                <>\n                  <Typography>\n                    <FormattedMessage\n                      id=\"onboarding-install.howto-ios\"\n                      description=\"Instruction on how to install the app on iOS\"\n                      defaultMessage={\n                        'To install the app on an iPhone, click the \"SHARE\" ' +\n                        'button at the bottom and then \"ADD TO HOME SCREEN\".'\n                      }\n                    />\n                  </Typography>\n                  <p className={classes.img}>\n                    <img src=\"/a2hs-ios.png\" style={{ maxWidth: '100%' }} />\n                  </p>\n                </>\n              )}\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(InstallToHomeScreen);\n","import Avatar from '@material-ui/core/es/Avatar';\nimport Grid from '@material-ui/core/es/Grid';\nimport List from '@material-ui/core/es/List';\nimport ListItem from '@material-ui/core/es/ListItem';\nimport ListItemAvatar from '@material-ui/core/es/ListItemAvatar';\nimport ListItemText from '@material-ui/core/es/ListItemText';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport { observable, runInAction, action } from 'mobx';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport {\n  defineMessages,\n  FormattedMessage,\n  InjectedIntlProps,\n  injectIntl\n} from 'react-intl';\nimport AccountIcon from '../../components/AccountIcon';\nimport LedgerConfirmIllustration\n  from '../../components/LedgerConfirmIllustration';\nimport LedgerConnectIllustration\n  from '../../components/LedgerConnectIllustration';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute, accountOverviewRoute } from '../../routes';\nimport { AccountType } from '../../stores/account';\nimport LedgerStore, { LedgerAccount } from '../../stores/ledger';\nimport OnboardingStore from '../../stores/onboarding';\nimport WalletStore from '../../stores/wallet';\n\nconst styles = createStyles({\n  content: {\n    padding: 20,\n    textAlign: 'center'\n  },\n  noPadding: {\n    marginLeft: -20,\n    marginRight: -20\n  },\n  accountAvatar: {\n    backgroundColor: 'white'\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ntype DecoratedProps = Props & InjectedIntlProps;\n\ninterface PropsInjected extends DecoratedProps {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n  walletStore: WalletStore;\n  ledgerStore: LedgerStore;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingLedgerAccountPage'\n});\n\nconst messages = defineMessages({\n  connectInstructionsV2: {\n    id: 'onboarding-ledger-account.connect-instructions',\n    description:\n      'Text instructing the user to open the RISE app on their Ledger device',\n    defaultMessage:\n      'Connect your Ledger, open the RISE app and click Discover Device below.'\n  },\n  unsupportedBrowser: {\n    id: 'onboarding-ledger-account.unsupported-browser',\n    description:\n      'Message when trying to use a browser that doesn\\'t support Ledger devices',\n    defaultMessage:\n      'Your browser doesn\\'t support using a Ledger device. If you wish to access this feature, ' +\n      'you could try again with Google Chrome. It is a browser known to implement support for this.'\n  },\n  statusConnecting: {\n    id: 'onboarding-ledger-account.status-connecting',\n    description: 'Status text when attempting to connect to the Ledger device',\n    defaultMessage: 'Trying to connect...'\n  },\n  statusConnectingHelpLink: {\n    id: 'onboarding-ledger-account.status-connecting-help-link',\n    description: 'Content of the link to the ledger support page',\n    defaultMessage: 'visit the support page'\n  },\n  accountNrLabel: {\n    id: 'onboarding-ledger-account.account-nr-label',\n    description: 'Label for the account number available for import',\n    defaultMessage: 'Account #{number}'\n  },\n  confirmInstructions: {\n    id: 'onboarding-ledger-account.confirm-instructions',\n    description:\n      'Text instructing the user to confirm their address on their Ledger',\n    defaultMessage: 'Please confirm the address above on your Ledger device.'\n  },\n  statusWaitingConfirmation: {\n    id: 'onboarding-ledger-account.status-waiting-confirmation',\n    description: 'Status text when waiting for user to confirm the account',\n    defaultMessage:\n      'Waiting for confirmation... ({seconds} {seconds, plural,' +\n      '  one {second}' +\n      '  other {seconds}' +\n      '} remaining)'\n  }\n});\n\n@inject('onboardingStore')\n@inject('routerStore')\n@inject('walletStore')\n@inject('ledgerStore')\n@observer\nclass LedgerAccountPage extends React.Component<DecoratedProps> {\n  get injected(): PropsInjected {\n    return this.props as PropsInjected;\n  }\n  accountsToShow: number = 5;\n  private countdownId: null | number = null;\n\n  @observable private selectedAccount: null | LedgerAccount = null;\n  @observable private selectionTimeout: null | Date = null;\n  @observable private countdownSeconds: number = 0;\n  @observable\n  private accounts = observable.array<LedgerAccount>(\n    new Array(this.accountsToShow)\n  );\n  private loadingAccounts = false;\n\n  // async componentWillMount() {\n  //   const { ledgerStore } = this.injected;\n  //\n  //   // TODO call inside of a click handler\n  //   await ledgerStore.open();\n  // }\n\n  componentWillUnmount() {\n    this.injected.ledgerStore.close();\n  }\n\n  onDiscoverLedger = () => {\n    this.injected.ledgerStore.open();\n  }\n\n  render() {\n    const { intl, classes, ledgerStore } = this.injected;\n    const { transport } = ledgerStore;\n    const { selectedAccount, countdownSeconds } = this;\n\n    this.loadAccounts();\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-ledger-account.title\"\n            description=\"Import a Ledger account screen title\"\n            defaultMessage=\"Import a Ledger account\"\n          />\n        </ModalPaperHeader>\n        {/* NO SUPPORT */ ledgerStore.hasSupport === false ? (\n          <Grid container={true} className={classes.content} spacing={16}>\n            <Grid item={true} xs={12}>\n              <Typography\n                children={intl.formatMessage(messages.unsupportedBrowser)}\n              />\n            </Grid>\n          </Grid>\n        ) : /* SETUP THE DEVICE */ transport === null ? (\n          <Grid container={true} className={classes.content} spacing={16}>\n            <Grid item={true} xs={12}>\n              <Typography\n                children={intl.formatMessage(messages.connectInstructionsV2)}\n              />\n            </Grid>\n            <Grid item={true} xs={12}>\n              <div className={classes.noPadding}>\n                <LedgerConnectIllustration onClick={this.onDiscoverLedger} />\n              </div>\n            </Grid>\n            <Grid item={true} xs={12}>\n              <Typography\n                children={intl.formatMessage(messages.statusConnecting)}\n              />\n              {this.getConnectingHelpMsg()}\n            </Grid>\n          </Grid>\n        ) : /* CONFIRM IMPORT */ selectedAccount !== null ? (\n          <>\n            <List>\n              <ListItem key={selectedAccount.address} divider={true}>\n                <ListItemAvatar>\n                  <Avatar className={classes.accountAvatar}>\n                    <AccountIcon\n                      size={24}\n                      address={selectedAccount ? selectedAccount.address : ''}\n                    />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={intl.formatMessage(messages.accountNrLabel, {\n                    number: selectedAccount.slot + 1\n                  })}\n                  secondary={selectedAccount ? selectedAccount.address : '...'}\n                />\n              </ListItem>\n            </List>\n            <Grid container={true} className={classes.content} spacing={16}>\n              <Grid item={true} xs={12}>\n                <Typography\n                  children={intl.formatMessage(messages.confirmInstructions)}\n                />\n              </Grid>\n              <Grid item={true} xs={12}>\n                <div className={classes.noPadding}>\n                  <LedgerConfirmIllustration />\n                </div>\n              </Grid>\n              <Grid item={true} xs={12}>\n                <Typography\n                  children={intl.formatMessage(\n                    messages.statusWaitingConfirmation,\n                    { seconds: countdownSeconds }\n                  )}\n                />\n              </Grid>\n            </Grid>\n          </>\n        ) : (\n          /* SELECT ACCOUNT */ <List>\n            {this.accounts.map((data, index) => (\n              <ListItem\n                key={index}\n                divider={index + 1 < this.accounts.length}\n                button={true}\n                onClick={() => this.confirmImport(data)}\n              >\n                <ListItemAvatar>\n                  <Avatar className={classes.accountAvatar}>\n                    <AccountIcon size={24} address={data ? data.address : ''} />\n                  </Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={intl.formatMessage(messages.accountNrLabel, {\n                    number: data ? data.slot + 1 : '...'\n                  })}\n                  secondary={data ? data.address : '...'}\n                />\n              </ListItem>\n            ))}\n          </List>\n        )}\n      </ModalPaper>\n    );\n  }\n\n  getConnectingHelpMsg() {\n    const { intl } = this.injected;\n    return (\n      <Typography>\n        <FormattedMessage\n          id=\"onboarding-ledger-account.status-connecting-help-v2\"\n          description=\"Link to the help page regarding Ledger connection problems\"\n          defaultMessage=\"In case of problems please {link}.\"\n          values={{\n            link: (\n              <a\n                href=\"https://support.ledger.com/hc/en-us/articles/115005165269-Fix-connection-issues\"\n                target=\"_blank\"\n              >\n                {intl.formatMessage(messages.statusConnectingHelpLink)}\n              </a>\n            )\n          }}\n        />\n      </Typography>\n    );\n  }\n\n  private updateSelectionCountdown = () => {\n    const now = new Date();\n    const remainMs =\n      this.selectionTimeout !== null\n        ? this.selectionTimeout.getTime() - now.getTime()\n        : 0;\n    const isCountdownActive = remainMs > 0;\n\n    runInAction(() => {\n      if (isCountdownActive) {\n        this.countdownSeconds = Math.ceil(remainMs / 1000);\n      } else {\n        // Make sure that the timeout clears the selected account\n        this.selectedAccount = null;\n      }\n    });\n\n    if (isCountdownActive && this.countdownId === null) {\n      this.countdownId = window.setInterval(this.updateSelectionCountdown, 250);\n    } else if (!isCountdownActive && this.countdownId !== null) {\n      window.clearInterval(this.countdownId);\n      this.countdownId = null;\n    }\n  }\n\n  private async confirmImport(account: LedgerAccount) {\n    const { walletStore, routerStore, ledgerStore } = this.injected;\n    const { device } = ledgerStore;\n\n    if (account !== null) {\n      const { address: accountAddress } = account;\n\n      // Switch to account importing UI\n      runInAction(() => {\n        this.selectedAccount = account;\n        this.selectionTimeout = new Date(new Date().getTime() + 25000);\n        this.updateSelectionCountdown();\n      });\n\n      // Run the actual confirmation logic\n      let success: boolean;\n      try {\n        success = await ledgerStore.confirmAccount(account.slot);\n      } catch (ex) {\n        success = false;\n      }\n\n      if (success && this.selectedAccount === account) {\n        // login(...) and goTo(...) need to be called outside of runInAction, to avoid\n        // weird order of execution and goTo(...) ending up being called before login(...)\n        walletStore.login(\n          accountAddress,\n          {\n            type: AccountType.LEDGER,\n            hwId: device!.vendorId.toString(),\n            hwSlot: account.slot\n          },\n          true\n        );\n        routerStore.goTo(accountOverviewRoute, { id: accountAddress });\n      } else {\n        runInAction(() => {\n          // Switch back to account list\n          this.selectedAccount = null;\n        });\n      }\n    }\n  }\n\n  /**\n   * TODO move to LedgerStore\n   */\n  @action\n  private async loadAccounts() {\n    const { walletStore, ledgerStore } = this.injected;\n    const { device } = ledgerStore;\n\n    // wait for a ready transport\n    if (!device) {\n      return;\n    }\n\n    // run once\n    if (this.loadingAccounts) {\n      return;\n    }\n\n    this.loadingAccounts = true;\n    this.selectedAccount = null;\n\n    for (let slot = 0, index = 0; index < this.accountsToShow; slot++) {\n      const data = await ledgerStore.getAccount(slot);\n      const isImported = walletStore.accounts.has(data.address);\n\n      if (isImported) {\n        continue;\n      }\n\n      runInAction(() => {\n        this.accounts[index] = data;\n      });\n\n      index++;\n    }\n  }\n}\n\nexport default stylesDecorator(injectIntl(LedgerAccountPage));\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport {\n  createStyles,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport TextField from '@material-ui/core/es/TextField';\nimport Typography from '@material-ui/core/es/Typography';\nimport { Rise } from 'dpos-offline';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport {\n  defineMessages,\n  FormattedMessage,\n  InjectedIntlProps,\n  injectIntl\n} from 'react-intl';\nimport AccountIcon from '../../components/AccountIcon';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { onboardingAddAccountRoute, accountOverviewRoute } from '../../routes';\nimport { AccountType } from '../../stores/account';\nimport WalletStore from '../../stores/wallet';\nimport {\n  normalizeMnemonic,\n  derivePublicKey,\n  AccountIDVersion\n} from '../../utils/utils';\n\nconst styles = createStyles({\n  content: {\n    padding: 20\n  },\n  accountContainer: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  accountField: {\n    flex: 1\n  },\n  accountIcon: {\n    marginLeft: 10\n  }\n});\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface PropsInjected extends Props {\n  walletStore: WalletStore;\n  routerStore: RouterStore;\n}\n\ninterface State {\n  address: string | null;\n  mnemonic: string;\n  mnemonicInvalid: boolean;\n}\n\ntype DecoratedProps = Props & InjectedIntlProps;\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingExistingAccountPage'\n});\n\nconst messages = defineMessages({\n  invalidMnemonicGeneric: {\n    id: 'onboarding-mnemonic-account.invalid-mnemonic-generic',\n    description: 'Error label for invalid mnemonic text input',\n    defaultMessage: 'Invalid mnemonic. A valid mnemonic is a list of 12 words.'\n  }\n});\n\n@inject('walletStore')\n@inject('routerStore')\n@observer\nclass MnemonicAccountPage extends React.Component<DecoratedProps, State> {\n  get injected(): PropsInjected & DecoratedProps {\n    // @ts-ignore\n    return this.props;\n  }\n\n  constructor(props: DecoratedProps) {\n    super(props);\n\n    this.state = {\n      mnemonic: '',\n      mnemonicInvalid: false,\n      address: null\n    };\n  }\n\n  handleFormSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n\n    const { routerStore, walletStore } = this.injected;\n    const { address } = this.state;\n    if (!address) {\n      this.setState({ mnemonicInvalid: true });\n      return;\n    }\n\n    walletStore.login(address, { type: AccountType.MNEMONIC }, true);\n    routerStore.goTo(accountOverviewRoute, { id: address });\n  }\n\n  handleMnemonicChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    const mnemonic = ev.target.value;\n\n    this.setState({\n      address: this.getAddressFromMnemonic(mnemonic),\n      mnemonic,\n      mnemonicInvalid: false\n    });\n  }\n\n  getAddressFromMnemonic = (mnemonic: string) => {\n    const normalized = normalizeMnemonic(mnemonic);\n    if (normalized) {\n      return Rise.calcAddress(\n        derivePublicKey(normalized),\n        this.injected.walletStore.getTxNetwork(),\n        AccountIDVersion.NEW\n      );\n    }\n    return null;\n  }\n\n  handleMnemonicBlur = () => {\n    const { mnemonic } = this.state;\n    if (!this.getAddressFromMnemonic(mnemonic)) {\n      this.setState({ mnemonicInvalid: true });\n    }\n  }\n\n  mnemonicError(): string | null {\n    const { intl } = this.injected;\n    const { address } = this.state;\n\n    if (address) {\n      return null;\n    }\n\n    return intl.formatMessage(messages.invalidMnemonicGeneric);\n  }\n\n  render() {\n    const { classes } = this.injected;\n    const { mnemonic, mnemonicInvalid, address } = this.state;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader backLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-mnemonic-account.title\"\n            description=\"Existing account screen title\"\n            defaultMessage=\"Existing account\"\n          />\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          spacing={16}\n          component=\"form\"\n          onSubmit={this.handleFormSubmit}\n        >\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-mnemonic-account.enter-mnemonic-text\"\n                description=\"Text asking the user to fill the input field\"\n                defaultMessage=\"Enter the mnemonic of an existing RISE account you wish to access:\"\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <div className={classes.accountContainer}>\n              <TextField\n                type=\"password\"\n                className={classes.accountField}\n                label={\n                  <FormattedMessage\n                    id=\"onboarding-mnemonic-account.mnemonic-input-label\"\n                    description=\"Account mnemonic input label\"\n                    defaultMessage=\"Account mnemonic\"\n                  />\n                }\n                error={mnemonicInvalid}\n                value={mnemonic}\n                FormHelperTextProps={{\n                  error: mnemonicInvalid\n                }}\n                helperText={mnemonicInvalid ? this.mnemonicError() || '' : ''}\n                onChange={this.handleMnemonicChange}\n                onBlur={this.handleMnemonicBlur}\n              />\n              <AccountIcon\n                className={classes.accountIcon}\n                size={48}\n                address={address || ''}\n              />\n            </div>\n          </Grid>\n          {address && (\n            <Grid item={true} xs={12}>\n              <Typography>\n                <FormattedMessage\n                  id=\"onboarding-mnemonic-account.account-address-text\"\n                  description=\"Account address for the inputted mnemonic\"\n                  defaultMessage=\"Your account address is {address}.\"\n                  values={{ address }}\n                />\n              </Typography>\n            </Grid>\n          )}\n          <Grid item={true} xs={12}>\n            <Button type=\"submit\" fullWidth={true}>\n              <FormattedMessage\n                id=\"onboarding-mnemonic-account.continue\"\n                description=\"Continue button label\"\n                defaultMessage=\"Continue\"\n              />\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(injectIntl(MnemonicAccountPage));\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport bip39 from 'bip39';\nimport classNames from 'classnames';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  onboardingAddAccountRoute,\n  onboardingVerifyMnemonicsRoute\n} from '../../routes';\nimport OnboardingStore from '../../stores/onboarding';\n\nconst styles = (theme: Theme) => {\n  const { pxToRem } = theme.typography;\n  const mnemonicFontSize = 21;\n  const mnemonicLineHeight = 24.5;\n\n  let wordLabels = {};\n  for (let i = 1; i <= 12; i++) {\n    wordLabels[`&.${i}::before`] = { content: `\"${i}\"` };\n  }\n\n  return createStyles({\n    content: {\n      padding: 20\n    },\n    mnemonic: {\n      fontSize: pxToRem(mnemonicFontSize),\n      lineHeight: `${round((mnemonicLineHeight + 20) / mnemonicFontSize)}em`,\n      textAlign: 'center'\n    },\n    separator: {},\n    word: {\n      display: 'inline-block',\n      position: 'relative',\n      marginLeft: '0.2em',\n      marginRight: '0.2em',\n      '&::before': {\n        position: 'absolute',\n        left: 0,\n        right: 0,\n        bottom: `${round((mnemonicLineHeight + 8) / 10)}em`,\n        fontSize: pxToRem(10),\n        lineHeight: '1em',\n        opacity: 0.5,\n        userSelect: 'none',\n        pointerEvents: 'none'\n      }\n    },\n    'word-1': { '&::before': { content: '\"#1\"' } },\n    'word-2': { '&::before': { content: '\"#2\"' } },\n    'word-3': { '&::before': { content: '\"#3\"' } },\n    'word-4': { '&::before': { content: '\"#4\"' } },\n    'word-5': { '&::before': { content: '\"#5\"' } },\n    'word-6': { '&::before': { content: '\"#6\"' } },\n    'word-7': { '&::before': { content: '\"#7\"' } },\n    'word-8': { '&::before': { content: '\"#8\"' } },\n    'word-9': { '&::before': { content: '\"#9\"' } },\n    'word-10': { '&::before': { content: '\"#10\"' } },\n    'word-11': { '&::before': { content: '\"#11\"' } },\n    'word-12': { '&::before': { content: '\"#12\"' } }\n  });\n};\n\nfunction newMnemonic(): string[] {\n  return bip39.generateMnemonic().split(' ');\n}\n\nfunction round(val: number) {\n  return Math.round(val * 1e5) / 1e5;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  mnemonic?: string[];\n}\n\ninterface PropsInjected extends Props {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n}\n\ninterface State {\n  mnemonic: string[];\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingNewMnemonicPage'\n});\n\n@inject('onboardingStore')\n@inject('routerStore')\n@observer\nclass NewMnemonicPage extends React.Component<Props, State> {\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      mnemonic: props.mnemonic || newMnemonic()\n    };\n  }\n\n  handleContinueClick = () => {\n    const { routerStore, onboardingStore } = this.injected;\n    onboardingStore.mnemonic = this.state.mnemonic;\n    routerStore.goTo(onboardingVerifyMnemonicsRoute);\n  }\n\n  render() {\n    const { classes } = this.injected;\n    const { mnemonic } = this.state;\n    const wordCount = mnemonic.length;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader closeLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-new-mnemonic.title\"\n            description=\"New mnemonic screen title\"\n            defaultMessage=\"Write this down\"\n          />\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          spacing={16}\n          justify=\"center\"\n        >\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-new-mnemonic.mnemonic-pretext\"\n                description=\"Text before the mnemonic secret\"\n                defaultMessage={`This is your new {wordCount, number}-word mnemonic secret:`}\n                values={{\n                  wordCount\n                }}\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Typography className={classes.mnemonic} component=\"p\" variant=\"h6\">\n              {mnemonic.map((word, idx) => (\n                <React.Fragment key={idx}>\n                  {idx > 0 && ' '}\n                  <span\n                    className={classNames(\n                      classes.word,\n                      classes[`word-${idx + 1}`]\n                    )}\n                  >\n                    {word}\n                  </span>\n                </React.Fragment>\n              ))}\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-new-mnemonic.write-mnemonic-down\"\n                description=\"Instructions to write down the mnemonic\"\n                defaultMessage={\n                  `Write your mnemonic down on a physical piece of paper so ` +\n                  `that you could store it in a safe place later.`\n                }\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-new-mnemonic.mnemonic-grants-full-access\"\n                description=\"Final notice about the seriousness of mnemonic\"\n                defaultMessage=\"NB! Anyone who knows this can transfer funds out of your account.\"\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <Button fullWidth={true} onClick={this.handleContinueClick}>\n              <FormattedMessage\n                id=\"onboarding-new-mnemonic.continue\"\n                description=\"Continue button label\"\n                defaultMessage=\"Continue\"\n              />\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(NewMnemonicPage);\n","import Button from '@material-ui/core/es/Button';\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Link from '../../components/Link';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport { accountOverviewNoIDRoute } from '../../routes';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    content: {\n      padding: 20\n    },\n    text: {\n      marginTop: 10,\n      '&:first-child': {\n        marginTop: 0\n      }\n    },\n    button: {\n      marginTop: 10\n    }\n  });\n\ninterface Props extends WithStyles<typeof styles> {\n  routerStore?: RouterStore;\n}\n\ninterface PropsInjected extends Props {\n  routerStore: RouterStore;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingSecurityNoticePage'\n});\n\n@inject('routerStore')\n@observer\nclass NoMnemonicNoticePage extends React.Component<Props> {\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  render() {\n    const { classes } = this.injected;\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader closeLink={{ route: accountOverviewNoIDRoute }}>\n          <FormattedMessage\n            id=\"onboarding-no-mnemonic-notice.title\"\n            description=\"No passphrase notice screen title\"\n            defaultMessage=\"Your account was added\"\n          />\n        </ModalPaperHeader>\n        <div className={classes.content}>\n          <Typography className={classes.text}>\n            <FormattedMessage\n              id=\"onboarding-no-mnemonic-notice.did-you-notice\"\n              description=\"Notice about asking for the passphrase only when making transactions\"\n              defaultMessage={\n                'Did you notice that you didn\\'t have to enter your passphrase? ' +\n                'That\\'s because you will only need to enter your mnemonic passphrase ' +\n                'when you\\'re about to make a transaction.'\n              }\n            />\n          </Typography>\n          <Typography className={classes.text}>\n            <FormattedMessage\n              id=\"onboarding-no-mnemonic-notice.written-down-mnemonic\"\n              description=\"Reminder to have the passphrase written down\"\n              defaultMessage={\n                'Please make sure that your passphrase is written down securely ' +\n                'so that you wouldn\\'t forget it as it is usually not needed often.'\n              }\n            />\n          </Typography>\n          <Link route={accountOverviewNoIDRoute}>\n            <Button className={classes.button} fullWidth={true}>\n              <FormattedMessage\n                id=\"onboarding-no-mnemonic-notice.continue\"\n                description=\"Continue button label\"\n                defaultMessage=\"Go to account overview\"\n              />\n            </Button>\n          </Link>\n        </div>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(NoMnemonicNoticePage);\n","import React, { ReactNode } from 'react';\nimport ModalBackdrop from '../../components/ModalBackdrop';\n\ninterface Props {}\n\nconst onboarding: React.SFC<Props> = function(\n  props: Props & { children?: ReactNode }\n) {\n  return (\n    <>\n      <ModalBackdrop open={true} transitionDuration={0} />\n      {props.children}\n    </>\n  );\n};\n\nexport default onboarding;\n","import Button from '@material-ui/core/es/Button';\nimport Collapse from '@material-ui/core/es/Collapse';\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport Typography from '@material-ui/core/es/Typography';\nimport classNames from 'classnames';\nimport { observer } from 'mobx-react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Link from '../../components/Link';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  onboardingAddAccountRoute,\n  onboardingNewMnemonicRoute\n} from '../../routes';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    content: {\n      padding: 20\n    },\n    pretext: {\n      marginBottom: 5\n    },\n    tipContainer: {\n      paddingLeft: 20\n    },\n    tipText: {\n      display: 'list-item',\n      listStyle: 'disc',\n      marginTop: 5,\n      marginBottom: 5\n    },\n    inactiveTipText: {\n      opacity: 0.65,\n      transition: theme.transitions.create('opacity')\n    },\n    button: {\n      marginTop: 5\n    }\n  });\n\ninterface Props extends WithStyles<typeof styles> {}\n\ninterface State {\n  currentTip: number;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingSecurityNoticePage'\n});\n\n@observer\nclass SecurityNoticePage extends React.Component<Props, State> {\n  tipRefs: React.RefObject<HTMLDivElement>[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      currentTip: 0\n    };\n    this.tipRefs = [\n      React.createRef(),\n      React.createRef(),\n      React.createRef(),\n      React.createRef(),\n      React.createRef()\n    ];\n  }\n\n  handleNextTipClick = () => {\n    this.setState(\n      prevState => {\n        return { currentTip: prevState.currentTip + 1 };\n      },\n      () => {\n        // Focus the revealed tip (mainly for screen readers)\n        const { currentTip } = this.state;\n        const el = this.tipRefs[currentTip].current;\n        if (el) {\n          el.focus();\n        }\n      }\n    );\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { currentTip } = this.state;\n\n    const tips = [];\n    tips.push(\n      <FormattedMessage\n        id=\"onboarding-security-notice.correct-url-tip\"\n        description=\"Tip about checking the browser URL\"\n        defaultMessage={\n          'When accessing this wallet, always type the URL into the browser address bar ' +\n          'yourself or use a bookmark that you yourself created. Never trust links posted ' +\n          'on social media, in search results, sent in emails or listed on other websites.'\n        }\n      />\n    );\n    tips.push(\n      <FormattedMessage\n        id=\"onboarding-security-notice.trust-browser-tip\"\n        description=\"Tip about truting your browser\"\n        defaultMessage={\n          'If your browser gives you any sort of security warning about this web wallet, ' +\n          'get in touch with us and report it. Do not ignore the warning nor enter your ' +\n          'mnemonic secret!'\n        }\n      />\n    );\n    tips.push(\n      <FormattedMessage\n        id=\"onboarding-security-notice.own-devices-tip\"\n        description=\"Tip about untrustworthy devices\"\n        defaultMessage={\n          'Only use your own devices when accessing your accounts. Do not enter your mnemonic ' +\n          'secret on untrustworthy devices (public computers, friends computers/phones, etc) ' +\n          'as they might be littered with malware and keyloggers.'\n        }\n      />\n    );\n    tips.push(\n      <FormattedMessage\n        id=\"onboarding-security-notice.apply-updates-tip\"\n        description=\"Tip about installing security updates\"\n        defaultMessage={\n          'Always keep your operating system, anti-virus software and browser up to date with ' +\n          'latest security updates.'\n        }\n      />\n    );\n    tips.push(\n      <FormattedMessage\n        id=\"onboarding-security-notice.hardware-wallets-tip\"\n        description=\"Tip about using hardware wallets\"\n        defaultMessage={\n          'If possible, prefer hardware wallets over mnemonic secret for storing larger ' +\n          'amounts of RISE.'\n        }\n      />\n    );\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader closeLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-security-notice.title\"\n            description=\"Security notice screen title\"\n            defaultMessage=\"Security tips\"\n          />\n        </ModalPaperHeader>\n        <div className={classes.content}>\n          <Typography className={classes.pretext}>\n            <FormattedMessage\n              id=\"onboarding-security-notice.keep-in-mind\"\n              description=\"Notice before the list of tips\"\n              defaultMessage=\"Things to keep in mind to increase the security of your funds:\"\n            />\n          </Typography>\n          {tips.map((tip, idx) => (\n            <Collapse\n              key={idx}\n              className={classes.tipContainer}\n              in={idx <= currentTip}\n              aria-hidden={idx > currentTip}\n            >\n              <div\n                tabIndex={idx <= currentTip ? 0 : -1}\n                ref={this.tipRefs[idx]}\n              >\n                <Typography\n                  className={classNames(\n                    classes.tipText,\n                    idx !== currentTip && classes.inactiveTipText\n                  )}\n                  children={tip}\n                />\n              </div>\n            </Collapse>\n          ))}\n          {currentTip + 1 < tips.length ? (\n            <Button\n              className={classes.button}\n              onClick={this.handleNextTipClick}\n              fullWidth={true}\n            >\n              <FormattedMessage\n                id=\"onboarding-security-notice.next-tip\"\n                description=\"Button label for when there are more tips to be revealed\"\n                defaultMessage=\"Next tip\"\n              />\n            </Button>\n          ) : (\n            <Link route={onboardingNewMnemonicRoute}>\n              <Button className={classes.button} fullWidth={true}>\n                <FormattedMessage\n                  id=\"onboarding-security-notice.continue\"\n                  description=\"Button label for when all of the tips have been seen\"\n                  defaultMessage=\"Continue\"\n                />\n              </Button>\n            </Link>\n          )}\n        </div>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(SecurityNoticePage);\n","import Button from '@material-ui/core/es/Button';\nimport Grid from '@material-ui/core/es/Grid';\nimport Hidden from '@material-ui/core/es/Hidden';\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles\n} from '@material-ui/core/es/styles';\nimport TextField from '@material-ui/core/es/TextField';\nimport Typography from '@material-ui/core/es/Typography';\nimport classNames from 'classnames';\nimport { inject, observer } from 'mobx-react';\nimport RouterStore from '../../stores/router';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport ModalPaper from '../../components/ModalPaper';\nimport ModalPaperHeader from '../../components/ModalPaperHeader';\nimport {\n  onboardingAccountCreatedRoute,\n  onboardingAddAccountRoute\n} from '../../routes';\nimport OnboardingStore from '../../stores/onboarding';\nimport WalletStore from '../../stores/wallet';\n\nconst styles = (theme: Theme) => {\n  const { pxToRem } = theme.typography;\n  const mnemonicFontSize = 16;\n  const mnemonicLineHeight = 24.5;\n\n  return createStyles({\n    content: {\n      padding: 20\n    },\n    mnemonic: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n      fontSize: pxToRem(mnemonicFontSize),\n      lineHeight: `${round(mnemonicLineHeight / mnemonicFontSize)}em`,\n      verticalAlign: 'bottom',\n      textAlign: 'center',\n      userSelect: 'none'\n    },\n    wordGroup: {\n      position: 'relative',\n      marginTop: pxToRem(10),\n      marginBottom: pxToRem(10),\n      marginLeft: '0.35em',\n      marginRight: '0.35em'\n    },\n    wordLabel: {\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      bottom: `${round((mnemonicLineHeight + 3) / 10)}em`,\n      fontSize: pxToRem(10),\n      lineHeight: '1em',\n      opacity: 0.5,\n      userSelect: 'none',\n      pointerEvents: 'none'\n    },\n    wordValue: {\n      display: 'block',\n      minWidth: `${round(64 / mnemonicFontSize)}em`,\n      height: `${round(24.5 / mnemonicFontSize)}em`,\n      borderBottom: '1px dotted #999',\n      color: '#999'\n    },\n    currentWordValue: {\n      color: theme.palette.text.primary,\n      borderBottom: '1px dashed #000'\n    }\n  });\n};\n\nfunction round(val: number) {\n  return Math.round(val * 1e5) / 1e5;\n}\n\ninterface Props extends WithStyles<typeof styles> {\n  mnemonic?: string[];\n}\n\ninterface PropsInjected extends Props {\n  onboardingStore: OnboardingStore;\n  routerStore: RouterStore;\n  walletStore: WalletStore;\n}\n\ninterface State {\n  mnemonic: string[];\n  uncheckedIndices: number[];\n  currentWordIndex: number;\n  currentWordValue: string;\n  currentWordInvalid: boolean;\n}\n\nconst stylesDecorator = withStyles(styles, {\n  name: 'OnboardingVerifyMnemonicPage'\n});\n\n@inject('onboardingStore')\n@inject('routerStore')\n@inject('walletStore')\n@observer\nclass VerifyMnemonicPage extends React.Component<Props, State> {\n  wordInputRef: React.RefObject<HTMLInputElement>;\n\n  get injected(): PropsInjected {\n    // @ts-ignore\n    return this.props;\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.wordInputRef = React.createRef();\n\n    const { routerStore, onboardingStore } = this.injected;\n    const mnemonic = props.mnemonic || onboardingStore.mnemonic;\n    if (!mnemonic) {\n      routerStore.goTo(onboardingAddAccountRoute);\n      return;\n    }\n\n    const uncheckedIndices = mnemonic!.map((_, i) => i);\n    const randIdx = Math.trunc(Math.random() * uncheckedIndices.length);\n    const currentWordIndex = uncheckedIndices.splice(randIdx, 1)[0];\n    this.state = {\n      mnemonic: mnemonic!,\n      uncheckedIndices,\n      currentWordIndex,\n      currentWordValue: '',\n      currentWordInvalid: false\n    };\n  }\n\n  handlePlaceholderClick = (ev: React.MouseEvent<HTMLElement>) => {\n    ev.preventDefault();\n\n    const wordInputEl = this.wordInputRef.current;\n    if (wordInputEl != null) {\n      wordInputEl.focus();\n    }\n  };\n\n  handleCurrentWordChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    let value = ev.target.value;\n    value = value.toLowerCase().trim();\n\n    this.setState({\n      currentWordValue: value\n    });\n  };\n\n  handleFormSubmit = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault();\n\n    const { mnemonic, currentWordValue } = this.state;\n    let { currentWordIndex } = this.state;\n\n    if (mnemonic[currentWordIndex] !== currentWordValue) {\n      this.setState({ currentWordInvalid: true });\n    } else if (this.state.uncheckedIndices.length > 0) {\n      let uncheckedIndices = this.state.uncheckedIndices.slice();\n      let randIdx = Math.trunc(Math.random() * uncheckedIndices.length);\n      currentWordIndex = uncheckedIndices.splice(randIdx, 1)[0];\n\n      this.setState({\n        uncheckedIndices,\n        currentWordIndex,\n        currentWordValue: '',\n        currentWordInvalid: false\n      });\n    } else {\n      this.finish();\n    }\n  };\n\n  handleContinueClick = () => {\n    if (this.canFinish()) {\n      this.finish();\n    }\n  };\n\n  canFinish() {\n    const { mnemonic, uncheckedIndices } = this.state;\n    return uncheckedIndices.length <= mnemonic.length - 4;\n  }\n\n  finish() {\n    const { routerStore, onboardingStore, walletStore } = this.injected;\n    const { mnemonic } = this.state;\n    onboardingStore.address = walletStore.registerAccount(mnemonic);\n    // Clear the mnemonic from memory as it has been securely written\n    // down by the user (hopefully)\n    onboardingStore.mnemonic = null;\n    routerStore.goTo(onboardingAccountCreatedRoute);\n  }\n\n  render() {\n    const { classes } = this.injected;\n    const { mnemonic, uncheckedIndices, currentWordIndex } = this.state;\n\n    const words: Array<'unchecked' | 'checked' | 'current'> = mnemonic.map(\n      (_, idx) => {\n        if (idx === currentWordIndex) {\n          return 'current';\n        } else if (uncheckedIndices.indexOf(idx) >= 0) {\n          return 'unchecked';\n        } else {\n          return 'checked';\n        }\n      }\n    );\n\n    return (\n      <ModalPaper open={true}>\n        <ModalPaperHeader closeLink={{ route: onboardingAddAccountRoute }}>\n          <FormattedMessage\n            id=\"onboarding-verify-mnemonic.title\"\n            description=\"Verify mnemonic screen title\"\n            defaultMessage=\"Check mnemonic\"\n          />\n        </ModalPaperHeader>\n        <Grid\n          container={true}\n          className={classes.content}\n          spacing={16}\n          justify=\"center\"\n          component=\"form\"\n          onSubmit={this.handleFormSubmit}\n        >\n          <Hidden xsDown={true} implementation=\"css\">\n            <Grid item={true} xs={12} aria-hidden={true}>\n              <Typography\n                component=\"p\"\n                variant=\"h6\"\n                className={classes.mnemonic}\n              >\n                {words.map((state, idx) => (\n                  <React.Fragment key={idx}>\n                    <span\n                      className={classes.wordGroup}\n                      onClick={this.handlePlaceholderClick}\n                    >\n                      <span className={classes.wordLabel}>#{idx + 1}</span>\n                      <span\n                        className={classNames(\n                          classes.wordValue,\n                          state === 'current' && classes.currentWordValue\n                        )}\n                      >\n                        {state === 'current' && '?'}\n                        {state === 'checked' && '✓'}\n                      </span>\n                    </span>\n                  </React.Fragment>\n                ))}\n              </Typography>\n            </Grid>\n          </Hidden>\n          <Grid item={true} xs={12}>\n            <Typography>\n              <FormattedMessage\n                id=\"onboarding-verify-mnemonic.verify-mnemonic\"\n                description=\"Instructions to verify the Nth word of the mnemonic\"\n                defaultMessage={\n                  `Verify that you wrote down your mnemonic correctly. ` +\n                  `Enter the {whichWordInBold} into the text field below.`\n                }\n                values={{\n                  whichWordInBold: (\n                    <FormattedMessage\n                      tagName=\"strong\"\n                      id=\"onboarding-verify-mnemonic.verify-mnemonic-which-word\"\n                      description=\"Highlighted Nth word message to be injected\"\n                      defaultMessage={\n                        `{whichWord, selectordinal,` +\n                        ` one {#st word}` +\n                        ` two {#nd word}` +\n                        ` few {#rd word}` +\n                        ` other {#th word}` +\n                        `}`\n                      }\n                      values={{\n                        whichWord: currentWordIndex + 1\n                      }}\n                    />\n                  )\n                }}\n              />\n            </Typography>\n          </Grid>\n          <Grid item={true} xs={12}>\n            <TextField\n              inputRef={this.wordInputRef}\n              label={\n                <FormattedMessage\n                  id=\"onboarding-verify-mnemonic.input-label-which-word\"\n                  description=\"Word number to enter into the text field\"\n                  defaultMessage=\"Word #{whichWord, number}\"\n                  values={{\n                    whichWord: currentWordIndex + 1\n                  }}\n                />\n              }\n              fullWidth={true}\n              error={this.state.currentWordInvalid}\n              value={this.state.currentWordValue}\n              onChange={this.handleCurrentWordChange}\n            />\n          </Grid>\n          <Grid item={true} xs={12} sm={6}>\n            <Button type=\"submit\" fullWidth={true}>\n              {uncheckedIndices.length > 0 ? (\n                <FormattedMessage\n                  id=\"onboarding-verify-mnemonic.check\"\n                  description=\"Check button label\"\n                  defaultMessage=\"Check\"\n                />\n              ) : (\n                <FormattedMessage\n                  id=\"onboarding-verify-mnemonic.check-and-continue\"\n                  description=\"Check button label\"\n                  defaultMessage=\"Check & continue\"\n                />\n              )}\n            </Button>\n          </Grid>\n          <Grid item={true} xs={12} sm={6}>\n            <Button\n              fullWidth={true}\n              disabled={!this.canFinish()}\n              onClick={this.handleContinueClick}\n            >\n              <FormattedMessage\n                id=\"onboarding-verify-mnemonic.continue\"\n                description=\"Continue button label\"\n                defaultMessage=\"Continue\"\n              />\n            </Button>\n          </Grid>\n        </Grid>\n      </ModalPaper>\n    );\n  }\n}\n\nexport default stylesDecorator(VerifyMnemonicPage);\n","import AccountCreatedPage from './AccountCreatedPage';\nimport AddAccountPage from './AddAccountPage';\nimport ChooseLanguagePage from './ChooseLanguagePage';\nimport ChooseNetworkPage from './ChooseNetworkPage';\nimport ExistingAccountPage from './ExistingAccountPage';\nimport ExistingAccountTypePage from './ExistingAccountTypePage';\nimport ImportExportPage from './ImportExportPage';\nimport InstallToHomeScreen from './InstallToHomeScreen';\nimport LedgerAccountPage from './LedgerAccountPage';\nimport MnemonicAccountPage from './MnemonicAccountPage';\nimport NewMnemonicPage from './NewMnemonicPage';\nimport NoMnemonicNoticePage from './NoMnemonicNoticePage';\nimport Onboarding from './Onboarding';\nimport SecurityNoticePage from './SecurityNoticePage';\nimport VerifyMnemonicPage from './VerifyMnemonicPage';\n\nexport {\n  Onboarding,\n  VerifyMnemonicPage,\n  NewMnemonicPage,\n  NoMnemonicNoticePage,\n  ExistingAccountTypePage,\n  SecurityNoticePage,\n  ExistingAccountPage,\n  ChooseLanguagePage,\n  AddAccountPage,\n  AccountCreatedPage,\n  MnemonicAccountPage,\n  LedgerAccountPage,\n  ChooseNetworkPage,\n  InstallToHomeScreen,\n  ImportExportPage\n};\n"]}